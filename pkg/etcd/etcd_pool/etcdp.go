package etcd_pool

import (
	"github.com/google/uuid"
	"github.com/woshikedayaa/news-poster/pkg/utils/structutil"
	etcdc "go.etcd.io/etcd/client/v3"
	"go.uber.org/zap"
)

var defaultEmptyPool = &EtcdPool{
	maxConn:     25,
	minConn:     10,
	minIdleConn: 5,
	conn:        nil,
	logger:      nil,
	config:      etcdc.Config{Endpoints: []string{"127.0.0.1:2379"}},
}

type EtcdClientWrapper struct {
	*etcdc.Client
	wrapperID string // generated by uuid
	isUsed    bool
}

func (e *EtcdClientWrapper) UnWrapper() *etcdc.Client {
	return e.Client
}

func (e *EtcdClientWrapper) Release() {
	e.isUsed = false
}

type EtcdPool struct {
	config      etcdc.Config // config etcd
	maxConn     int          // 最大链接数
	minConn     int          // 最小链接数
	minIdleConn int          // 最小空闲链接
	logger      *zap.Logger  // logger
	conn        []*EtcdClientWrapper
}

// Clone 创建一个新的对象 其中 conn 不参与 clone
func (ep *EtcdPool) Clone() *EtcdPool {
	// 这里赋值私有属性
	// 如果后面有新的私有属性 需要来这里加入
	dst := &EtcdPool{
		maxConn:     ep.maxConn,
		minConn:     ep.minConn,
		minIdleConn: ep.minIdleConn,
		config:      ep.config,
		logger:      ep.logger,
		// conn 不参与 clone
		conn: nil,
	}

	// 公有属性全交给了 util
	structutil.Clone(ep, dst)
	return dst
}

func Create(options ...Option) (*EtcdPool, error) {
	var err error = nil
	ep := defaultEmptyPool.Clone()
	// 解析配置参数
	for _, option := range options {
		option.apply(ep)
	}
	// 创建连接
	for i := 0; i < max(ep.minConn, ep.minIdleConn); i++ {
		c, err := etcdc.New(ep.config)
		if err != nil {
			return nil, err
		}
		ep.conn = append(ep.conn, &EtcdClientWrapper{
			Client:    c,
			wrapperID: uuid.New().String(),
			isUsed:    false,
		})
	}
	// ...
	return ep, err
}
